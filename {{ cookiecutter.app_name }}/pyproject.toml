[build-system]
requires = ["uv-build"]
build-backend = "uv_build"

[project]
name = "{{ cookiecutter.app_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.short_description }}"
authors = [{name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.email }}"}]
readme = "README.md"
license = {file = "LICENSE"}
keywords = []
classifiers = [
    "{{ cookiecutter.development_status }}",
    "Environment :: Console",
    "Intended Audience :: Developers",
    {% if cookiecutter.license == 'mit' -%}
    "License :: OSI Approved :: MIT License",
    {% elif cookiecutter.license == 'gpl-3.0' -%}
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    {% elif cookiecutter.license == 'apache-2.0' -%}
    "License :: OSI Approved :: Apache Software License",
    {% elif cookiecutter.license == 'gpl-2.0' -%}
    "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
    {% elif cookiecutter.license == 'bsd-3-clause' -%}
    "License :: OSI Approved :: BSD License",
    {% elif cookiecutter.license == 'agpl-3.0' -%}
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    {% elif cookiecutter.license == 'unlicense' -%}
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    {% endif -%}
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Typing :: Typed",
]
requires-python = "~=3.9"
dependencies = [
    "click",
{%- if cookiecutter.use_rich %}
    "rich_click",
{%- endif %}
]

[dependency-groups]
tests = [
    "pytest",
]
docs = [
    "furo",
    "myst-parser",
    "sphinx",
    "sphinx-copybutton",
    "sphinxext-opengraph",
]
dev = [
    { include-group = "tests" },
    { include-group = "docs" },
]

[project.urls]
Documentation = "https://{{ cookiecutter.app_name }}.readthedocs.io/en/stable/"
Changelog = "https://{{ cookiecutter.app_name }}.readthedocs.io/en/stable/changelog.html"
"Source Code" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.app_name }}"
"Issue Tracker" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.app_name }}/issues"

[project.scripts]
{{ cookiecutter.app_name }} = "{{ cookiecutter.package_name }}.__main__:cli"

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "E501",  # line too long (pycodestyle), handled by ruff-format
    "ANN002",  # missing-type-args (flake8-annotations)
    "ANN003",  # missing-type-kwargs (flake8-annotations)
    "ANN401",  # any-type (flake8-annotations)
    "COM",  # flake8-commas, handled by ruff-format
    "CPY",  # flake8-copyright
    "ISC001",  # single-line-implicit-string-concatenation (flake8-implicit-str-concat)
    "INP",  # flake8-no-pep420
]
src = ["src", "tests", "docs"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",  # unused-import (Pyflakes)
]
"noxfile.py" = [
    "D100",  # undocumented-public-module (pydocstyle)
    "ERA001",  # commented-out-code (eradicate)
]
"docs/conf.py" = [
    "A001",  # builtin-variable-shadowing (flake8-builtins)
]
"src/{{ cookiecutter.package_name }}/cli.py" = [
    "C901",  # complex-structure (mccabe)
    "FBT001",  # boolean-type-hint-positional-argument (flake8-boolean-trap)
    "A001",  # builtin-variable-shadowing (flake8-builtins)
    "A002",  # builtin-argument-shadowing (flake8-builtins)
    "PLR0913",  # too-many-arguments (Pylint)
]
"tests/**/test_*.py" = [
    "D",  # pydocstyle
    "ANN201",  # missing-return-type-undocumented-public-function (flake8-annotations)
    "S101",   # assert (flake8-bandit)
    "SIM300",   # yoda-conditions (flake8-simplify)
    "PLR2004",   # magic-value-comparison (Pylint)
]

[tool.ruff.lint.isort]
known-first-party = [
  "{{ cookiecutter.app_name }}",
  "tests",
]
lines-between-types = 0

[tool.ruff.lint.pydocstyle]
convention = "google"
